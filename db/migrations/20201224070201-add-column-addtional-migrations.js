'use strict'

module.exports = {
  up: async (queryInterface, Sequelize) => {
    // await queryInterface.renameColumn('users', 'status', 'status_active')
    await queryInterface.addColumn('users', 'mobile_phone_2', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'mobile_phone_brand', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'mobile_phone_model', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'imei_number', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'sim_provider', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'sim_id', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'iota_app_gui_theme', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'permission', { type: Sequelize.STRING })
    await queryInterface.addColumn('users', 'application_version', { type: Sequelize.STRING })
    // await queryInterface.addColumn('users', 'last_login', { type: Sequelize.DATE })
    await queryInterface.addColumn('users', 'last_mobile_access', { type: Sequelize.DATE })

    /// ENTITIES
    await queryInterface.addColumn('entities', 'postal_code', { type: Sequelize.STRING })
    await queryInterface.addColumn('entities', 'lat', { type: Sequelize.STRING })
    await queryInterface.addColumn('entities', 'lng', { type: Sequelize.STRING })
    await queryInterface.addColumn('entities', 'accuracy', { type: Sequelize.STRING })
    await queryInterface.addColumn('entities', 'gps_errors', { type: Sequelize.STRING })
    await queryInterface.addColumn('entities', 'country', { type: Sequelize.STRING })

    /// INVENTORY material_entity
    // await queryInterface.renameColumn('material_entity', 'consumption_rate', 'consumption_rate_day')
    await queryInterface.addColumn('material_entity', 'abnormality_type', { type: Sequelize.STRING })
    await queryInterface.addColumn('material_entity', 'abnormality_duration_days', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'inventory_policy', { type: Sequelize.STRING })
    await queryInterface.addColumn('material_entity', 'service_level', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'days_stock', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'consumption_rate_week', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'consumption_rate_month', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'demand_forecast', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'safety_stock', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'optimal_order_quantity', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'lead_time_demand', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'lead_time_days', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'order_periodicity_days', { type: Sequelize.DOUBLE })
    await queryInterface.addColumn('material_entity', 'min_updated_at', { type: Sequelize.DATE })
    await queryInterface.addColumn('material_entity', 'max_updated_at', { type: Sequelize.DATE })
    await queryInterface.addColumn('material_entity', 'retailer_price_updated_at', { type: Sequelize.DATE })
    await queryInterface.addColumn('manufactures', 'production_date', { type: Sequelize.DATE })
    await queryInterface.addColumn('manufactures', 'production_year', { type: Sequelize.INTEGER })
    await queryInterface.addColumn('stocks', 'in_transit', { type: Sequelize.DOUBLE })
  },

  down: async (queryInterface, Sequelize) => {
    // await queryInterface.renameColumn('users', 'status_active', 'status')
    await queryInterface.removeColumn('users', 'mobile_phone_2')
    await queryInterface.removeColumn('users', 'mobile_phone_brand')
    await queryInterface.removeColumn('users', 'mobile_phone_model')
    await queryInterface.removeColumn('users', 'imei_number')
    await queryInterface.removeColumn('users', 'sim_provider')
    await queryInterface.removeColumn('users', 'sim_id')
    await queryInterface.removeColumn('users', 'iota_app_gui_theme')
    await queryInterface.removeColumn('users', 'permission')
    await queryInterface.removeColumn('users', 'application_version')
    // await queryInterface.removeColumn('users', 'last_login')
    await queryInterface.removeColumn('users', 'last_mobile_access')

    await queryInterface.removeColumn('entities', 'postal_code')
    await queryInterface.removeColumn('entities', 'lat')
    await queryInterface.removeColumn('entities', 'lng')
    await queryInterface.removeColumn('entities', 'accuracy')
    await queryInterface.removeColumn('entities', 'gps_errors')
    await queryInterface.removeColumn('entities', 'country')

    // await queryInterface.renameColumn('material_entity', 'consumption_rate_day', 'consumption_rate')
    await queryInterface.removeColumn('material_entity', 'abnormality_type')
    await queryInterface.removeColumn('material_entity', 'abnormality_duration_days')
    await queryInterface.removeColumn('material_entity', 'inventory_policy')
    await queryInterface.removeColumn('material_entity', 'service_level')
    await queryInterface.removeColumn('material_entity', 'days_stock')
    await queryInterface.removeColumn('material_entity', 'consumption_rate_week')
    await queryInterface.removeColumn('material_entity', 'consumption_rate_month')
    await queryInterface.removeColumn('material_entity', 'demand_forecast')
    await queryInterface.removeColumn('material_entity', 'safety_stock')
    await queryInterface.removeColumn('material_entity', 'optimal_order_quantity')
    await queryInterface.removeColumn('material_entity', 'lead_time_demand')
    await queryInterface.removeColumn('material_entity', 'lead_time_days')
    await queryInterface.removeColumn('material_entity', 'order_periodicity_days')
    await queryInterface.removeColumn('material_entity', 'min_updated_at')
    await queryInterface.removeColumn('material_entity', 'max_updated_at')
    await queryInterface.removeColumn('material_entity', 'retailer_price_updated_at')
    await queryInterface.removeColumn('manufactures', 'production_date')
    await queryInterface.removeColumn('manufactures', 'production_year')
    await queryInterface.removeColumn('stocks', 'in_transit')
  }
}
