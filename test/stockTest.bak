import chai, { expect } from 'chai'
import chaiHttp from 'chai-http'
import app from '../app/app'
import { vendorID } from './config'
import { USER_ROLE } from '../app/helpers/constants'
import { getUser, seederMaterial } from './seeder'

chai.use(chaiHttp)
chai.should()

let stockProp = [
  'id',
  'material_id',
  'entity_id',
  'consumption_rate',
  'retailer_price',
  'tax',
  'min',
  'max',
  'stock_update',
  'available_stock',
  'on_hand_stock',
  'allocated_stock',
  'user_updated_by',
  'user_created_by',
  'user_deleted_by',
  'material',
  'stocks'
]

let nestedStockProp = [
  'material.id',
  'material.name',
  'material.description',
  'material.pieces_per_unit',
  'material.unit',
  'material.temperature_sensitive',
  'material.temperature_min',
  'material.temperature_max',
  'material.managed_in_batch',
  'stocks[0].id',
  'stocks[0].batch_id',
  'stocks[0].status',
  'stocks[0].qty',
  'stocks[0].updatedAt',
  'stocks[0].updated_by',
  'stocks[0].allocated',
  'stocks[0].available'
]
let authToken = null
let adminToken = null
let materialID = null
let materialTagID = null
before(function(done){
  getUser.findByRoleEntity(USER_ROLE.OPERATOR, vendorID).then(({token}) => {
    authToken = 'Bearer '+token
    getUser.findByRoleEntity(USER_ROLE.SUPERADMIN, null).then(({token}) => {
      seederMaterial.findByName('BCG').then(({data, materialTag}) => {
        materialID = data.id
        materialTagID = materialTag.id
        adminToken = 'Bearer '+token
        done()
      })
    })
  })
})
let stockMaterialProp = []
let nestedStockMaterialProp = []
describe('Stock', () => {
  let queryFilter = [
    {keyword: 'BCG'},
    {material_id: materialID},
    {expired_before: '2021-01-01'},
    {material_tag_id: materialTagID}
  ]

  describe('GET /stocks', () => {
    it('Get stock complete', (done) => {
      chai.request(app)
        .get('/stocks')
        .set('Authorization', authToken)
        .end((err, res) => {
          res.should.have.status(200)
          res.body.should.have.a('object')
          // expect(res.body.list).should.all.have.deep.property('stocks')
          stockProp.forEach(element => {
            expect(res.body.list[0]).to.have.deep.property(element)
          })
          nestedStockProp.forEach(element => {
            expect(res.body.list[0]).to.have.deep.nested.property(element)
          })
          done()
        })
    })

    it('Get stock by admin complete', (done) => {
      chai.request(app)
        .get('/stocks')
        .set('Authorization', adminToken)
        .end((err, res) => {
          res.should.have.status(200)
          res.body.should.have.a('object')
          // expect(res.body.list).should.all.have.deep.property('stocks')
          stockProp.forEach(element => {
            expect(res.body.list[0]).to.have.deep.property(element)
          })
          nestedStockProp.forEach(element => {
            expect(res.body.list[0]).to.have.deep.nested.property(element)
          })
          done()
        })
    })

    queryFilter.forEach(query => {
      it('Get stocks by ' + JSON.stringify(query) + ' complete', (done) => {
        chai.request(app)
          .get('/stocks')
          .query(query)
          .set('Authorization', authToken)
          .end((err, res) => {
            res.should.have.status(200)
            res.body.should.have.a('object')
            stockProp.forEach(element => {
              expect(res.body.list[0]).to.have.deep.property(element)
            })
            nestedStockProp.forEach(element => {
              expect(res.body.list[0]).to.have.deep.nested.property(element)
            })
            done()
          })
      })
    })
  })

  describe('GET /stock/material', () => {
    it('Get stock material complete', (done) => {
      chai.request(app)
        .get('/stock/material')
        .query({'material_id': materialID})
        .set('Authorization', authToken)
        .end((err, res) => {
          res.should.have.status(200)
          stockMaterialProp.forEach(element => {
            expect(res.body[0]).to.have.deep.property(element)
          })
          nestedStockMaterialProp.forEach(element => {
            expect(res.body[0]).to.have.deep.nested.property(element)
          })
          done()
        })
    })
  })
})
